#!/usr/bin/env python2

import getopt
import os
import sys
import socket
import getpass
import logging

from time import sleep
from datetime import date


import paramiko
import yaml

from ovirtsdk.xml import params
from ovirtsdk.api import API


MB = 1024*1024
GB = MB * 1024

DEFAULT_CONFIG_FILE = "config.yaml"


def main():
    logging.basicConfig(format="%(asctime)s %(message)s", datefmt="%Y/%m/%d %H:%M:%S")

    # Load command line opts
    try:
        opts, _ = getopt.getopt(sys.argv[1:], "hvc:u:r:d:", ["help", "verbose", "config=", "username=", "host=", "distro="])
    except getopt.GetoptError as err:
        logging.error(str(err))
        usage()
        sys.exit(2)

    # Prematurely parse command line options to get the "config" option
    config_file = DEFAULT_CONFIG_FILE
    for opt, arg in opts:
        if opt in ('-c', '--config'):
            config_file = arg


    file_config = load_config(config_file)

    distros = file_config['distros']
    username = False
    host = False
    password = False
    distro = False


    # Parse options from config file
    if 'username' in file_config:
        username = file_config['username']
    if 'password' in file_config:
        password = file_config['password']
    if 'host' in file_config:
        host = file_config['host']


    # Parse command line options
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-u", "--username"):
            username = arg
        elif opt in ("-r", "--host"):
            host = arg
        elif opt in ("-v", "--verbose"):
            logging.getLogger().setLevel(logging.INFO)
        elif opt in ("-d", "--distro"):
            d = next((item for item in distros if item["name"] == arg), None)
            if d == None:
                print "No distro with that name"
                sys.exit(1)
            else:
                distro = d

    # Prompt for password if missing
    if password is False:
        password = getpass.getpass("Enter password to connect to engine: ")

    # Check required options
    if username is False:
        logging.error('Username is required to connect to oVirt')
        exit(1)
    if password is False:
        logging.error('Password is required to connect to oVirt')
        exit(1)
    if host is False:
        logging.error('Host is required to connect to oVirt')
        exit(1)

    api = connect(username, password, host)

    if distro:
        run(api, distro)
    else:
        for d in distros:
            run(api, d)


def usage():
    print "usage: " + __file__ + " [OPTION..]"
    print """
    -h, --help: display this usage information
    -v, --verbose: show lots of output
    -c <config_file>, --config=<config_file>: the path to the configuration file; defaults to $PWD/config.yaml
    -u <username>, --username=<username>: the username to connect to the engine
    -r <hostname>, --host=<hostname>: the hostname or IP of the engine
    -d <distro>, --distro=<distro>: only create the template for <distro>
"""


def load_config(config_file):
    stream = file(config_file, 'r')
    config = yaml.load(stream)
    stream.close()
    return config


def connect(username, password, host):
    try:
        api = API(
            url="https://{}/api".format(host),
            username=username,
            password=password,
            insecure=True)
    except Exception:
        logging.error("Unable to connect to engine")
        sys.exit(1)

    return api


def run(api, config):
    vmname = config['name'] + "-x64"
    templatename = vmname
    memory = 1*GB
    mac = params.MAC(address=config['mac'])
    disksize = 20*GB

    vm = create_vm(api, vmname, config['type'], memory, mac, disksize)

    install_vm(api, vm)

    sysprep(api, vm, config)
    create_template(api, vm, templatename)

    cleanup(vm)

    logging.info("[%s] Template created", templatename)


def create_vm(api, vmname, os_type, memory, mac, disksize):
    logging.info("[%s] Creating VM", vmname)

    # Operating System
    osparams = params.OperatingSystem()
    osparams.set_type("rhel_7x64")

    vmparams = params.VM(
        name=vmname,
        cluster=api.clusters.get(name="Default"),
        template=api.templates.get(name="Blank"),
        memory=memory,
        initialization=None,
        os=osparams)
    # VM type
    vmparams.set_type("server")

    # Create the VM
    api.vms.add(vmparams)
    vm = api.vms.get(name=vmname)

    # Set graphics to QXL/VNC
    vm.get_display().set_type('SPICE') # this is NOT a bug, must be set to 'SPICE' first for some reason
    vm.update()
    for console in vm.graphicsconsoles.list():
        console.delete()
    vm.graphicsconsoles.add(
        params.GraphicsConsole(
            protocol='VNC'
        )
    )

    # Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1039009
    vm.set_initialization(None)

    vm.set_run_once(True)

    logging.info("[%s] Adding NIC", vmname)
    vm.nics.add(params.NIC(
        name="eth0",
        network=params.Network(name="guests"),
        interface="virtio",
        mac=mac))

    logging.info("[%s] Adding disks", vmname)
    vm.disks.add(params.Disk(
        storage_domains=params.StorageDomains(storage_domain=[api.storagedomains.get("data")]),
        size=disksize,
        status=None,
        interface="virtio",
        format="cow",
        sparse=True,
        bootable=True))

    logging.info("[%s] Waiting for VM to reach 'Down' state", vmname)
    while api.vms.get(vmname).status.state != 'down':
        sleep(1)

    logging.info("[%s] Waiting for disks to unlock", vmname)
    locked = True
    while locked:
        locked = False
        for disk in api.vms.get(vmname).disks.list():
            if disk.status.state != "ok":
                locked = True
        sleep(1)

    return vm

def install_vm(api, vm):
    logging.info("[%s] Starting VM with PXE boot", vm.name)
    vm.start(action=params.Action(vm=params.VM(os=params.OperatingSystem(boot=[params.Boot(dev="network")]))))

    logging.info("[%s] Waiting for install to complete", vm.name)
    while api.vms.get(vm.name).status.state != 'down':
        sleep(10)

    logging.info("[%s] Installed, powering up VM", vm.name)
    vm.start()


def sysprep(api, vm, config):
    # Wait for installation to complete
    logging.info("[%s] Waiting for SSH connection", vm.name)

    # Set loglevel to quiet while SSH-ing
    logLevel = logging.getLogger().getEffectiveLevel()
    logging.getLogger().setLevel(logging.ERROR)

    installing = True
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    while installing:
        try:
            ssh.connect(config['ip'], username="root", timeout=3)
            installing = False
        except socket.error:
            sleep(10)

    logging.info("[%s] Sysprepping VM", vm.name)

    files_dir = "files/" + config['name']

    # Copy all files in files_dir
    sftp = ssh.open_sftp()
    sftp.mkdir('/tmp/sysprep')
    for root, dirs, files in os.walk(files_dir):
        for f in files:
            sftp.put(root + "/" + f, "/tmp/sysprep/"+f)

    # Ensure sysprep script is executable
    sftp.chmod("/tmp/sysprep/sysprep", 777)

    # Run sysprep script
    ssh.exec_command("/tmp/sysprep/sysprep >/dev/null 2>&1")
    ssh.close()

    # TODO: check exit code or timeout

    # Reenable logging level
    logging.getLogger().setLevel(logLevel)

    logging.info("[%s] Waiting for VM to shut down after sysprep", vm.name)
    while api.vms.get(vm.name).status.state != 'down':
        sleep(5)


def create_template(api, vm, templatename):
    logging.info("[%s] Creating template", templatename)

    # Delete the current version of the template
    # TODO: Use template versioning feature
    current_template = api.templates.get(name=templatename)
    if current_template is not None:
        current_template.delete()
        # Wait for template to be deleted
        while api.templates.get(name=templatename) is not None:
            sleep(1)

    templateparams = params.Template(
        name=templatename,
        cluster=api.clusters.get(name="Default"),
        vm=api.vms.get(name=vm.name))
    api.templates.add(templateparams)

    logging.info("[%s] Waiting for template to unlock", templatename)
    while api.templates.get(name=templatename).status.state == "locked":
        sleep(5)


def cleanup(vm):
    logging.info("[%s] Removing VM", vm.name)
    vm.delete()


if __name__ == "__main__":
    main()
